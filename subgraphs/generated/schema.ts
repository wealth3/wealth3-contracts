// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Vault must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vault", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get contractTime(): BigInt {
    let value = this.get("contractTime");
    return value!.toBigInt();
  }

  set contractTime(value: BigInt) {
    this.set("contractTime", Value.fromBigInt(value));
  }

  get proofOfLifeFreq(): BigInt {
    let value = this.get("proofOfLifeFreq");
    return value!.toBigInt();
  }

  set proofOfLifeFreq(value: BigInt) {
    this.set("proofOfLifeFreq", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get lastProofOfLife(): BigInt {
    let value = this.get("lastProofOfLife");
    return value!.toBigInt();
  }

  set lastProofOfLife(value: BigInt) {
    this.set("lastProofOfLife", Value.fromBigInt(value));
  }

  get beneficiaries(): Array<Bytes> | null {
    let value = this.get("beneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set beneficiaries(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("beneficiaries");
    } else {
      this.set("beneficiaries", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get distribution(): Array<BigInt> | null {
    let value = this.get("distribution");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set distribution(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("distribution");
    } else {
      this.set("distribution", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}
